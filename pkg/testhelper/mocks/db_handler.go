// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "music-stream-api/pkg/models"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// DbHandler is an autogenerated mock type for the DbHandler type
type DbHandler struct {
	mock.Mock
}

// AddTrack provides a mock function with given fields: ctx, track
func (_m *DbHandler) AddTrack(ctx context.Context, track models.Track) error {
	ret := _m.Called(ctx, track)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Track) error); ok {
		r0 = rf(ctx, track)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownloadAudioFile provides a mock function with given fields: ctx, audioFileID
func (_m *DbHandler) DownloadAudioFile(ctx context.Context, audioFileID primitive.ObjectID) ([]byte, error) {
	ret := _m.Called(ctx, audioFileID)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) []byte); ok {
		r0 = rf(ctx, audioFileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, audioFileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTracks provides a mock function with given fields: ctx, filters
func (_m *DbHandler) GetTracks(ctx context.Context, filters map[string]interface{}) ([]models.Track, error) {
	ret := _m.Called(ctx, filters)

	var r0 []models.Track
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) []models.Track); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Track)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, map[string]interface{}) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *DbHandler) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadAudioFile provides a mock function with given fields: ctx, audioFile, trackName
func (_m *DbHandler) UploadAudioFile(ctx context.Context, audioFile []byte, trackName string) (interface{}, error) {
	ret := _m.Called(ctx, audioFile, trackName)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string) interface{}); ok {
		r0 = rf(ctx, audioFile, trackName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte, string) error); ok {
		r1 = rf(ctx, audioFile, trackName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
